-------------
-------------
DAMe 1.0
M. Lisandra Zepeda Mendoza
-------------
-------------


-------------
DESCRIPTION
-------------

DAMe is a set of python scripts designed to to perform the first steps in the analysis of very complicated datasets generated by metabarcoding laboratory methods that use double-tagged amplicons, PCR replicates, and multiplexing (sample-wise and barcode-wise) and sequencing with HTS technologies.

DAMe makes no assumptions on the used sequencing platform, and it is able to detect tag-jumpin events, chimeric sequences, sequencing errors, and contamination. DivA is a toolkit with python scripts that serve as tools to perform the first cleaning steps of a metabarcoding amplicon dataset following the next pipeline:

1.- Sort sequences from pooled samples by tag combination and collapse to unique sequences
2.- Optionally, remove chimeras using UCHIME in a de novo or reference-based fashion.
3.- Filter sequences that contain PCR/sequencing errors, chimeric sequences, sequences arising from contamination. 
4.- Optionally, the user can decollapse the unique sequences.

The final output can be directly used for any other program for taxonomic profiling.

-------------
INSTALLATION
-------------

DivA is a python script that does not need any sort of compilation. It was developed in Python 2.7.3 and uses the following modules which are generally already installed in the user's system:

- re
- os
- sys
- subprocess
- string
- argparse

Make sure to put DAMe's bin in your path. Alternatively, provide the full path when running the programs, making sure that the modules are in the same directory.

------
USAGE
------

############# 1.- sort.py  

Usage: sort.py [-h] [-fq FQ] [-p P] [-t T] [--keepPrimersSeq]

Sort amplicon sequences tagged on each end by tag combination

optional arguments:
  -h, --help        show this help message and exit
  -fq FQ            Input fastq with amplicon sequences
  -p P              Input txt with primer name and forward and reverse
                    sequences [Format: Name ForwardSeq ReverSeq]
  -t T              Input txt with tag names and sequences [Format: TagSeq
                    TagName]
  --keepPrimersSeq  Use this parameter if you want to keep the primer
                    sequences from the amplicon instead of trimming it
                    [default not set]

#Example:

python sort.py -fq Paul.AllOneLine.fastq -p Primers.txt -t Tags.txt

#An example of the necessary txt files can be found in the Example directory


############# 2.- chimeraCheck.py

Usage: chimeraCheck.py [-h] [-psInfo PSINFO] [-x X] [-p P]

Create necessary files to operate on sequences per PCR reaction

optional arguments:
  -h, --help      show this help message and exit
  -psInfo PSINFO  Txt file with the information on the tag combination in each
                  PCR reaction for every sample [Format: sampleName
                  TagNameForwardFromPCR1 TagNameReverseFromPCR1 Pool#
                  sampleName TagNameForwardFromPCR2 TagNameReverseFromPCR2
                  Pool# ...]
  -x X            Number of PCR rxns performed per sample
  -p P            The number of pools in which the samples were divided for
                  sequencing (in case of tag combinations repetition due to
                  processing so many samples) [default 1] NOTE: If using
                  pools, each fastq must be in a folder called pool#, in which
                  the sort.py was run for each pool inside the corresponding
                  folder, and this program chimeraCheck.py is run in the
                  parent directory of the pools directories


#Example:

python chimeraCheck.py -psInfo PSinfo.txt -x 2 

#An example of the necessary txt file can be found in the Example directory


############# 3.- filter.py

Usage: filter.py [-h] [-psInfo PSINFO] [-x X] [-y Y] [-p P] [-t T] [-l L]
                 [--chimeraChecked]

Filter the multiplexed sequences by the presence of the sequence in the
different PCR reactions at a given minimum abundance, and its length

optional arguments:
  -h, --help        show this help message and exit
  -psInfo PSINFO    Txt file with the information on the tag combination in
                    each PCR reaction for every sample [Format: sampleName
                    TagNameForwardFromPCR1 TagNameReverseFromPCR1 Pool#
                    sampleName TagNameForwardFromPCR2 TagNameReverseFromPCR2
                    Pool# ...]
  -x X              Number of PCR rxns performed per sample
  -y Y              Number of PCR rxns in which the sequence has to be present
  -p P              The number of pools in which the samples were divided for
                    sequencing (in case of tag combinations repetition due to
                    processing so many samples) [default 1] NOTE: If using
                    pools, each fastq must be in a folder called pool#, in
                    which the sort.py was run for each pool inside the
                    corresponding folder, and this program chimeraCheck.py is
                    run in the parent directory of the pools directories
  -t T              Number of times a unique sequence has to be present
  -l L              Minimum sequence length
  --chimeraChecked  Use this parameter if you have performed a chimera check
                    on the sorted collapsed sequence files [default not set]


#Example:

filter.py -psInfo PSinfo.txt -x 2 -y 2 -t 2 -l 211 --chimeraChecked


############# 4.- decollapse.py

Usage: decollapse.py [-h] [-input INPUT] [-outFas OUTFAS]

This program puts X number of times a sequence reported like this: Primer Tag1
Tag2 Freq Seq Qual Header. The utput is a fasta withe >Tag1.Tag2.Freq_RN ,
where RN is the writen line number in the output.

optional arguments:
  -h, --help      show this help message and exit
  -input INPUT    Txt file with the information on the tag combination and
                  freq of each unique seq
  -outFas OUTFAS  Output fasta wuth the unique sequences being repeated as
                  many times as their reported freq


#Example:

python decollapse.py -input Tag5_Tag8.txt -outFas Tag5_Tag8.decollapsed.fasta


-----
CITE
-----

Zepeda Mendoza and Gilbert (2015)  "DAMe: A Toolkit for the Initial Filtering Steps on Multiplexed Datasets from Double-tagged Amplicons for DNA Metabarcoding Analyses"

--------
CONTACT
--------

For any enquiries correspondence is sent to lisandracady@gmail.com


